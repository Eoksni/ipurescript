Kernel = import '/IPython/kernel/zmq/kernelbase/Kernel'

IdgKernelPy = import 'idgold/IdgKernelPy'

sys = import '/sys'
Compiler = import '/dg/Compiler'
BUILTINS = import '/dg/BUILTINS'
dg = import '/dg'
capture = import '/IPython/utils/capture'
BytesIO = import '/io/BytesIO'
display = import '/IPython/display/display'
Image = import '/IPython/display/Image'

IdgKernel = subclass Kernel where
    #: Ütopik bir çekirdek girişimi.
    #:
    implementation = 'Idg'
    implementation_version = '1.0'
    language = 'dg'
    language_info = ({('name', 'Dg'), ('mimetype', 'text/dg'), ('file_extension', '.dg'), ('codemirror_mode', {('name', 'python')}), ('pygments_lexer', 'ipython3')})
    language_version = '1.1.0' #??
    banner = "Dg will rule the Doges."

    __complete_word = word ~>
        path, dot, word = word.rpartition '.'
        completion_ns = (sys.modules !! '__main__') |>.__dict__
        sorted $ map (path + dot +) $
            # Hide private attributes unless an underscore was typed.
            filter (w -> w.startswith word and (word or not (w.startswith '_'))) $ if
                not path  => set Compiler.prefix | set BUILTINS | set completion_ns
                otherwise => except
                    err => dir $ eval path completion_ns
                    err `isinstance` Exception => []

    # Init?
    __init__ = *: args **: kwargs ~>
        @@__init__ **: kwargs
        None

    to_response = context type: 'stdout' ~>
      dict name: type text: context

    eval_ = code module: None ~>
          compiled_ = dg.compile code '<file>'
          if
            module is None => eval compiled_
            otherwise => eval compiled_ module

    to_png = fig ~>
      imgdata_ = BytesIO()
      fig_.savefig imgdata_ format:'png'
      imgdata_.seek 0
      urllib.parse.quote (base64.b64encode (imgdata_.getvalue!))

    do_execute = code silent store_history: True user_expressions: None allow_stdin: False ~>
               if not silent =>
                  @send_response @iopub_socket 'stream' (@to_response '{Under heavy development!!!}\n' 'stdout')
                  except
                    err_ =>
                      with captured_output_ = capture.capture_output display: True =>
                        @evalresult_ = @eval_ code (globals!)
                    err_ :: Exception =>
                      @send_response @iopub_socket 'stream' (@to_response ('HATA:' + captured_output_.stderr + '\n' + (str err_)))
                      @send_response @iopub_socket 'stream' (@to_response captured_output_.stderr type: 'stderr')
                    err_ is None =>
                      @send_response @iopub_socket 'stream' (@to_response captured_output_.stdout)
                      @send_response @iopub_socket 'stream' (@to_response '\n')
                      if @evalresult_ :: matplotlib.figure.Figure =>
                        @send_response @iopub_socket 'stream' (@to_response (str (Image (@to_png @evalresult_)).__dict__))
                      for output_ in captured_output_.outputs =>
                        @send_response @iopub_socket 'display_data' {('source', 'kernel'), ('data', ({(output_.)}))}
                        #@send_response @iopub_socket 'stream' (@to_response (str output_.__dict__))
                      @send_response @iopub_socket 'stream' (@to_response '\n')
                      @send_response @iopub_socket 'stream' (@to_response (str @evalresult_))
               {('status', 'ok'), ('execution_count', self.execution_count), ('payload', list!), ('user_expressions', dict!)}

    do_complete = code_ cursor_position_ ~>
        np = import '/numpy'
        code__ = code_ !! slice 0 (cursor_position_ + 1)
        splitted_code_ = code__.split!
        word_ = last splitted_code_
        completion_results_ = @__complete_word word_
        dict status: 'ok' matches: completion_results_ cursor_start: (cursor_position_ - (len word_)) cursor_end: cursor_position_ metadata: dict!
